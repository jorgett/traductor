# Script para ejecutar todas las pruebas del proyecto Traductor Chat

Write-Host "üß™ Ejecutando todas las pruebas de Traductor Chat..." -ForegroundColor Cyan

# Verificar que Python est√° disponible
Write-Host "`nüêç Verificando Python..." -ForegroundColor Yellow
try {
    $pythonVersion = python --version
    Write-Host "‚úÖ Python encontrado: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python no est√° instalado o no est√° en el PATH" -ForegroundColor Red
    Write-Host "   Instala Python desde: https://www.python.org/downloads/" -ForegroundColor Red
    exit 1
}

# Verificar si hay un entorno virtual y activarlo
Write-Host "`nüì¶ Verificando entorno virtual..." -ForegroundColor Yellow
if (Test-Path "venv") {
    Write-Host "‚úÖ Entorno virtual encontrado, activando..." -ForegroundColor Green
    & .\venv\Scripts\Activate.ps1
} else {
    Write-Host "‚ö†Ô∏è  No se encontr√≥ entorno virtual. Instalando dependencias globalmente..." -ForegroundColor Yellow
    # Instalar dependencias si es necesario
    pip install -r requirements.txt
}

# Ejecutar tests con pytest
Write-Host "`nüß™ Ejecutando pytest..." -ForegroundColor Blue
pytest -v --cov=. --cov-report=html --cov-report=term-missing

if ($LASTEXITCODE -ne 0) {
    Write-Host "`n‚ùå Fallos en las pruebas" -ForegroundColor Red
    exit 1
}

Write-Host "`n‚úÖ Todas las pruebas completadas exitosamente!" -ForegroundColor Green

# Test de integraci√≥n con Docker (opcional)
$runDocker = Read-Host "`nüê≥ ¬øEjecutar test de integraci√≥n con Docker? (y/N)"
if ($runDocker -eq "y" -or $runDocker -eq "Y") {
    Write-Host "`nüöÄ Iniciando servicios con Docker..." -ForegroundColor Yellow
    
    # Construir y ejecutar en segundo plano
    docker-compose up -d --build
    
    # Esperar a que el servicio est√© listo
    Write-Host "‚è≥ Esperando a que el servicio est√© listo..." -ForegroundColor Blue
    $maxAttempts = 30
    $attempt = 0
    
    do {
        Start-Sleep -Seconds 2
        $attempt++
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:5000/api" -TimeoutSec 5 -ErrorAction SilentlyContinue
            if ($response.StatusCode -eq 200) {
                Write-Host "‚úÖ Servicio est√° funcionando" -ForegroundColor Green
                break
            }
        } catch {
            Write-Host "." -NoNewline -ForegroundColor Yellow
        }
    } while ($attempt -lt $maxAttempts)
    
    if ($attempt -ge $maxAttempts) {
        Write-Host "`n‚ùå El servicio no respondi√≥ en tiempo esperado" -ForegroundColor Red
        docker-compose down
        exit 1
    }
    
    # Test b√°sico de la API
    Write-Host "`nüß™ Probando API de traducci√≥n..." -ForegroundColor Blue
    try {
        $testPayload = @{
            source = "en"
            target = "es"
            text = "Hello world"
        } | ConvertTo-Json
        
        $response = Invoke-RestMethod -Uri "http://localhost:5000/translate" -Method POST -Body $testPayload -ContentType "application/json"
        
        if ($response.translated_text) {
            Write-Host "‚úÖ API de traducci√≥n funciona correctamente" -ForegroundColor Green
            Write-Host "   Traducci√≥n: '$($response.translated_text)'" -ForegroundColor Cyan
        } else {
            Write-Host "‚ùå La API no devolvi√≥ una traducci√≥n v√°lida" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Error al probar la API: $_" -ForegroundColor Red
    }
    
    Write-Host "`nüõë Deteniendo servicios..." -ForegroundColor Yellow
    docker-compose down
}

Write-Host "`nüéâ Tests completados!" -ForegroundColor Green
if (Test-Path "htmlcov") {
    Write-Host "üìä Reporte de cobertura disponible en: htmlcov/index.html" -ForegroundColor Cyan
}
